1378. Replace Employee ID With The Unique Identifier
# Write your MySQL query statement below


SELECT 
 eu.unique_id , e.name
FROM Employees as e 
LEFT JOIN EmployeeUNI eu
ON e.id = eu.id
------------------------------------------------------------------
1068. Product Sales Analysis I
# Write your MySQL query statement below

SELECT 
  p.product_name , 
  s.year,
  s.price
FROM Sales s 
LEFT JOIN Product p 
ON s.product_id = p.product_id
------------------------------------------------------------------
1581. Customer Who Visited but Did Not Make Any Transactions
# Write your MySQL query statement below

SELECT 
customer_id , 
COUNT(v.visit_id) count_no_trans
FROM Visits v 
LEFT JOIN Transactions t 
ON v.visit_id = t.visit_id
WHERE t.transaction_id IS NULL
GROUP BY customer_id
------------------------------------------------------------------
197. Rising Temperature
# Write your MySQL query statement below


with cte as ( 
SELECT 
id ,
temperature, 
recordDate,
LAG(recordDate) OVER(ORDER BY recordDate) as prev_recordDate,
LAG(temperature) OVER(ORDER BY recordDate) as prev_temperature
FROM Weather 
) 

SELECT id
 FROM cte
 where datediff(recordDate,prev_recordDate) = 1 
 and temperature > prev_temperature
------------------------------------------------------------------
1661. Average Time of Process per Machine
# Write your MySQL query statement below

with cte as 
( 
-- need to group total time by the process to get 1 aggregate value for start_time and 1 agg value for end_time 
    SELECT 
        machine_id , 
        process_id,
        SUM(CASE WHEN activity_type = 'start' 
          THEN IFNULL(timestamp,0) 
          ELSE 0
          END) as start_timestamp,
        SUM(CASE WHEN activity_type = 'end'   
          THEN IFNULL(timestamp,0) 
          ELSE 0 
          END) as end_timestamp
    FROM Activity
    GROUP BY 
        machine_id , 
        process_id
)
-- need to group total time by the process to get 1 aggregate value for start_time and 1 agg value for end_time 
, 
total_time as ( 
SELECT 
    machine_id,
    process_id,
    end_timestamp - start_timestamp as total_time_per_process
   FROM cte ) 
SELECT 
    machine_id , 
    round(sum(total_time_per_process) / count(process_id),3) as processing_time
 from  total_time
 GROUP BY machine_id 
------------------------------------------------------------------
577. Employee Bonus
# Write your MySQL query statement below

SELECT 
 e.name , 
 b.bonus 
FROM Employee e 
LEFT JOIN Bonus b 
ON e.empId = b.empId
WHERE  IFNULL(b.bonus,0) < 1000

------------------------------------------------------------------
570. Managers with at Least 5 Direct Reports
# Write your MySQL query statement below

SELECT 
   distinct  e.name  
FROM Employee m  
INNER JOIN Employee e 
ON m.managerId = e.id 
GROUP BY m.managerId
HAVING  count(m.id) >= 5 
--------------------------------------
-- 570. Managers with at Least 5 Direct Reports
with managers as (SELECT 
  e.id , 
  e.name , 
  e.department
FROM Employee e 
LEFT JOIN Employee m 
ON e.id = m.managerId ) , 
emps as (
SELECT 
   managerId , 
   count(distinct id) as emps 
FROM Employee
GROUP BY managerId )
SELECT 
   distinct m.name
FROM managers m
INNER JOIN emps e
ON e.managerId = m.id 
WHERE emps >= 5 
------------------------------------
-- 1934. Confirmation Rate
with Confirmations_cte as 
( 
    SELECT
          user_id,
          SUM(CASE WHEN action = 'confirmed' THEN 1 ELSE 0 END) AS confirmations,
          count(*) AS total_req
    FROM Confirmations
    GROUP BY user_id
)
SELECT 
    u.user_id,
    round(IFNULL(confirmations/total_req,0),2) AS confirmation_rate
FROM Signups u 
LEFT JOIN Confirmations_cte c 
ON c.user_id = u.user_id 
--------------------------------
-- 1280. Students and Examinations
with student_exams as 
( 

SELECT 
  e.student_id ,
  e.subject_name , 
  count(*) attended_exams 
FROM Examinations e
GROUP BY e.student_id ,
         e.subject_name 

) , 
studnet_sub AS 
( SELECT 
   s.student_id , 
   s.student_name,
   sb.subject_name 
  FROM Students s , Subjects sb )
 SELECT 
  s.student_id,
  s.student_name,
  s.subject_name,
  ifnull(attended_exams,0) attended_exams
 FROM studnet_sub s 
 LEFT JOIN student_exams sub
 ON s.student_id = sub.student_id
 AND s.subject_name = sub.subject_name
 ORDER BY s.student_id , s.subject_name , attended_exams DESC
